{"createdAt":"2025-07-03T18:09:43.681Z","updatedAt":"2025-09-28T04:16:12.536Z","id":"FgqFv1FqQErkS0K6","name":"Odoo","active":false,"isArchived":true,"nodes":[{"parameters":{"jsCode":"const items = [];\nfor (const item of $input.all()) { // Itera sobre cada ítem de entrada al nodo Code\n  let aiResponseText = \"Lo siento, hubo un error interno (no se pudo acceder a la respuesta de la IA).\"; // Mensaje de fallback\n  \n  try {\n      let rawText = null;\n\n      // *** ACCESO SIMPLIFICADO Y DIRECTO A LA SALIDA DEL AI AGENT ***\n      // Asume que la salida del AI Agent es el 'item' que llega directamente a este nodo 'Code'.\n      // Intentar obtener el texto de la IA buscando en item.json.output o item.json.text\n      if (item.json) { // Asegurarse de que el item tenga una propiedad 'json'\n          if (typeof item.json.output === 'string') {\n              rawText = item.json.output;\n          } else if (typeof item.json.text === 'string') { \n              rawText = item.json.text;\n          }\n      }\n\n      // Si rawText sigue siendo null aquí, es porque no se encontró en item.json.\n      // En este caso, el AI Agent no está proporcionando su output como item.json.output/text.\n      // Esta es la rama que toma si el AI Agent no es el nodo inmediatamente anterior, o si su output no es el esperado.\n      if (!rawText) {\n          // Intentar obtenerlo a través de $node.getNode() como último recurso,\n          // aunque el error \"Referenced node doesn't exist\" sugiere que esto puede fallar.\n          try {\n              const aiAgentNode = $node.getNode('AI Agent'); \n              if (aiAgentNode && aiAgentNode.json) {\n                  if (typeof aiAgentNode.json.output === 'string') {\n                      rawText = aiAgentNode.json.output;\n                  } else if (typeof aiAgentNode.json.text === 'string') {\n                      rawText = aiAgentNode.json.text;\n                  }\n              } else if (aiAgentNode && typeof aiAgentNode.output === 'string') { // Para casos donde el output no está en .json\n                   rawText = aiAgentNode.output;\n              } else if (aiAgentNode && typeof aiAgentNode.text === 'string') { // Para casos donde el output no está en .json\n                   rawText = aiAgentNode.text;\n              }\n          } catch (getNodeError) {\n              console.warn(\"Fallo al obtener AI Agent via $node.getNode():\", getNodeError.message || getNodeError);\n          }\n      }\n\n\n      if (rawText) {\n          // Limpieza de barras invertidas (del problema anterior de \\\"asistente\\\")\n          rawText = rawText.replace(/\\\\/g, ''); \n\n          // Limpieza de caracteres de control ilegales para JSON\n          let cleanedText = rawText.replace(/[\\u0000-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F-\\u009F]/g, ''); \n          \n          // Eliminación AÚN MÁS AGRESIVA de saltos de línea y espacios especiales (causa de truncamiento)\n          cleanedText = cleanedText.replace(/[\\n\\r\\t\\f\\v\\u0085\\u2028\\u2029\\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]+/g, ' '); \n          \n          // Normalizar espacios y eliminar espacios al inicio/final\n          cleanedText = cleanedText.replace(/\\s+/g, ' ').trim(); \n\n          // Opcional: Eliminar comillas dobles al inicio y al final si la IA las pone literalmente.\n          if (cleanedText.startsWith('\"') && cleanedText.endsWith('\"')) {\n              cleanedText = cleanedText.substring(1, cleanedText.length - 1);\n          }\n\n          aiResponseText = cleanedText;\n          \n      } else {\n          // Este warning se activará si rawText sigue siendo null después de todos los intentos\n          console.warn(\"No se pudo obtener una respuesta de texto válida del AI Agent (valor nulo o no string en ningún formato esperado). Item:\", item);\n          aiResponseText = \"La respuesta de la IA no fue válida (formato inesperado de la IA).\";\n      }\n      \n  } catch (e) {\n      // Este catch capturará si hay un error inesperado fuera de las comprobaciones de acceso\n      console.error(\"Error inesperado en el nodo Code (posible error de JavaScript en el código):\", e);\n      aiResponseText = `ERROR EN CHATBOT (n8n): ${e.message || e}`; \n  }\n  \n  const responseBody = {\n    response: aiResponseText\n  };\n\n  items.push({ json: responseBody });\n}\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[160,-144],"id":"3fa53d3b-fbee-4895-bd90-273c5e927295","name":"Code"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $json.body.sessionId }}","contextWindowLength":10},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[-144,80],"id":"c6da6232-e916-4af9-9c50-a06b7167d484","name":"Simple Memory"},{"parameters":{"respondWith":"json","responseBody":"={ \"response\": \"{{ $node['Code'].json.response }}\" }","options":{"responseCode":200}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[448,-144],"id":"51257b46-5a61-4d56-9d47-365dcd0771d5","name":"Respond to Webhook"},{"parameters":{"model":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"gpt-4o-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-320,80],"id":"9e0df55e-2ed9-447b-8fc1-ff11fa5e4ad0","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"r8djHEeAWWI0Jv49","name":"OpenAi account"}}},{"parameters":{"promptType":"define","text":"={{ $json.body.message }}","hasOutputParser":true,"options":{"systemMessage":"=Eres un asistente y tu nombre es Maty"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[-240,-144],"id":"3ba71ad9-6286-458a-b435-e8a36490d610","name":"AI Agent"},{"parameters":{"httpMethod":"POST","path":"360e834f-3af9-4d76-8bf5-11684c2e6f1c","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-480,-144],"id":"cc8ffdba-a44f-4eb0-9c2f-6fda85056290","name":"Webhook","webhookId":"360e834f-3af9-4d76-8bf5-11684c2e6f1c"}],"connections":{"Code":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]},"Simple Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[{"node":"Code","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"AI Agent","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Caracas","callerPolicy":"workflowsFromSameOwner"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"7ffd1b8e-9a22-46d1-9524-2796541a3ad3","triggerCount":1,"shared":[{"createdAt":"2025-07-03T18:09:43.681Z","updatedAt":"2025-07-03T18:09:43.681Z","role":"workflow:owner","workflowId":"FgqFv1FqQErkS0K6","projectId":"n4vHSDQygtGMKCrV"}],"tags":[]}